var Dispatcher=new Flux.Dispatcher();
var AddContactButton=React.createClass({
    render(){
        return(
            <p className='text-center'>
                <button className='btn btn-outline btn-block'
                    onClick={this._onClick}>
                Add contact
                </button>
            </p>
        )
    },
    _onClick(){
      ActionCreators.clickCreate();
    }
});
var ContactDetailView = React.createClass({

    getInitialState: function () {
        return this._getStateFromProps(this.props)
    },
    _getStateFromProps: function (props) {

        return {
            'id': props.contact.id || '',
            'name': props.contact.name || '',
            'email': props.contact.email || '',
            'tel': props.contact.tel||''
        }
    },
    componentWillReceiveProps: function (nextProps) {

        var props = nextProps;
        console.log(nextProps.viewType==='create'+ '11111111111');
        if(nextProps.viewType==='create'){
            props={
                contact:{}
            }
        }

        this.setState(this._getStateFromProps(props));

    },
    render(){
        //setState(this.this._getStateFromProps(props))
        var isEditable = false;
        if (this.props.viewType === 'edit' ||
            this.props.viewType === 'create') {
            isEditable = true;
        }

        return (
            <div>
                <Toolbar isEditable={isEditable}
                         onClick={this._handleClick}/>

                <form role='form'
                      className='form-horizontal contract-form'>
                    <LabelRow isEditable={isEditable}
                              inputType='text'
                              labelName='name'
                              labelValue={this.state.name}
                              onChange={this._handleChange}/>
                    <LabelRow isEditable={isEditable}
                              inputType='email'
                              labelName='email'
                              labelValue={this.state.email}
                              onChange={this._handleChange}/>
                    <LabelRow isEditable={isEditable}
                              inputType='tel'
                              labelName='tel'
                              labelValue={this.state.tel}
                              onChange={this._handleChange}/>

                </form>
            </div>
        )
    },
    _handleChange(event){
        var type = event.target.getAttribute('type'),
            value = event.target.value;

        switch (type) {
            case'text':
                this.setState({
                    name: value
                });
                break;
            case 'email':
                this.setState({
                    email: value
                });
                break;
            case 'tel':
                this.setState({
                    tel: value
                });
                break;
        }

    },

    _handleClick(action){
        switch (action) {
            case 'cancel':
                ActionCreators.clickCancel();
                break;
            case 'delete':
                ActionCreators.destroy(this.state.id);
                ActionCreators.clickDelete(this.state.id);
                break;
            case 'edit':
                ActionCreators.clickEdit();
                break;
            case 'save':
                if (this.props.viewType === 'create') {
                    ActionCreators.create({
                        name:this.state.name,
                        tel: this.state.tel,
                        email: this.state.email
                    })
                } else {
                    ActionCreators.update({
                        id: this.state.id,
                        name: this.state.name,
                        tel: this.state.tel,
                        email: this.state.email

                    });
                }
                ActionCreators.clickSave();
                break;

        }
    }
});
var ContantList=React.createClass({
    _getContactRow: function (contact, index) {
        return(
            <ContactRow key={index} contact={contact}/>
        );
    },
    render(){
       var c=this.props.contacts.map(this._getContactRow);

       return (
           <div>
               <AddContactButton />
            <ul className="media-list contacts-container">
                {c}
            </ul>
           </div>
       )
   }
});
var ContactManager = React.createClass({

    getInitialState: function () {

        return this._getStateFromStor();
    },
    componentDidMount(){
        ContactStore.addChangeListener(this._onChange)
    },
    componentWillUnmount: function() {
        ContactStore.removeChangeListener(this._onChange);
    },

    _onChange(){
        this.setState(this._getStateFromStor());
        console.log(this.state.currentContact);
    },
    _getStateFromStor(){
        return {
            contacts: ContactStore.getContacts(),
            currentContact: ContactStore.getCurrentContact(),
            currentViewType: ContactStore.getCurrentViewType()
        }
    },
    render(){
        console.log(this.state);
        return (
            <div>
                <Header text={'Cool contact manager'}/>

                <div className='container'>
                    <div className='list-view-wrapper'>
                        <ContantList contacts={this.state.contacts}/>
                    </div>
                    <div className='detail-view-wrapper'>
                        <ContactDetailView
                            contact={this.state.currentContact}
                            viewType={this.state.currentViewType}/>
                    </div>
                </div>
            </div>
        )
    }
});

var ContactRow = React.createClass({

    render(){
        return (
            <li className="media" onClick={this._onClick}>
                <img className="media-object"
                     src={ 'app/img/faces/' + this.props.contact.avatar}/>

                <div className="media-heading">
                    <h4>{this.props.contact.name}</h4>
                    <small>{this.props.contact.tel}</small>
                </div>
            </li>
        )
    },

    _onClick(){
        ActionCreators.clickContact(this.props.contact.id);
    }
});
var Header = React.createClass({
    render(){
        return (
            <nav className='navbar navbar-default'>
            <div className='navbar-header'>
                <a className='navbar-brand'>{this.props.text}</a>
            </div>
            </nav>
        )
    }
});
var LabelRow = React.createClass({
    render(){
        var input = <div className='form-control-static'>
            {this.props.labelValue}
        </div>;
        if(this.props.isEditable){
            input= <input type={this.props.inputType}
                className='form-control contact-name-input'
                value={this.props.labelValue}
                onChange={this.props.onChange} />
        }
        return (
            <div className='form-group'>
                <label className='col-sm-4 control-label'>
                    {this.props.labelName} :</label>

                <div className='col-sm-6'>{input}</div>
            </div>
        );
    }
});
var Toolbar = React.createClass({
    render: function () {

        if (this.props.isEditable) {
            return (
                <div className='btn-toolbar'>
                    <button className='btn btn-outline pull-right'
                            onClick={this.props.onClick.bind(null,'cancel')}>
                        Cancel
                    </button>
                    <button className='btn btn-outline pull-right'
                        onClick={this.props.onClick.bind(null,'save')}>
                        Save
                    </button>
                </div>
            )
        } else {
            return (
                <div className='btn-toolbar'>
                    <button className='btn btn-outline pull-right'
                            onClick={this.props.onClick.bind(null,'back')}>
                        <span className='glyphicon glyphicon-arrow-left'></span>
                        Back
                    </button>
                    <button className='btn btn-outline pull-right'
                            onClick={this.props.onClick.bind(null,'delete')}>
                        <span className='glyphicon glyphicon-trash'></span>
                        Delete
                    </button>
                    <button className='btn btn-outline pull-right'
                            onClick={this.props.onClick.bind(null,'edit')}>
                        <span className='glyphicon glyphicon-pencil'></span>
                        Edit
                    </button>
                </div>
            )
        }
    }
});
var ContactManagerConstants = {
    actionTypes: {
        RECEIVE_INITIAL_PAYLOAD:'receive-initial-payload',

        CLICK_CANCEL:'click-cancel',
        CLICK_DELETE:'click-delete',
        CLICK_EDIT:'click-edit',
        CLICK_CONTACT:'click-contact',
        CLICK_SAVE:'click-save',
        CLICK_CREATE:'click-create',

        UPDATE_CONTACT:'update-cantat',
        DESTROY_CONTACT:'destroy-contact',
        CREATE_CONTACT:'create-contact'
    }
};
var ActionCreators=(function (Dispatcher, ContactManagerConstants) {
    var ActionTypes=ContactManagerConstants.actionTypes;

    function clickCancel(){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_CANCEL
        })
    }
    function clickDelete(){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_DELETE
        })
    }
    function clickEdit(){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_EDIT
        })
    }
    function clickContact(id){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_CONTACT,
            id:id
        })
    }
    function clickSave(id){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_SAVE,
            id:id
        })
    }

    function createContact(id){
        Dispatcher.dispatch({
            type:ActionTypes.CREATE_CONTACT,
            id:id
        })
    }
    function clickCreate(id){
        Dispatcher.dispatch({
            type:ActionTypes.CLICK_CREATE,
            id:id
        })
    }




    function destroy(id){
        console.log('destroy');
        Dispatcher.dispatch({
            type:ActionTypes.DESTROY_CONTACT,
            id:id
        })
    }
    function update(id){
        console.log('destroy');
        Dispatcher.dispatch({
            type:ActionTypes.UPDATE_CONTACT,
            id:id
        })
    }
    function create(id){
        Dispatcher.dispatch({
            type:ActionTypes.CREATE_CONTACT,
            id:id
        })
    }

    return{
        clickCancel:clickCancel,
        clickDelete:clickDelete,
        clickEdit:clickEdit,
        clickContact:clickContact,
        clickSave:clickSave,
        createContact:createContact,
        clickCreate:clickCreate,


        update:update,
        create:create,
        destroy:destroy
    }
}(Dispatcher, ContactManagerConstants));
var ContactPersistantActionCreators= (function (Dispatcher, ContactManagerConstants) {
    var actionTypes= ContactManagerConstants.actionTypes;

    function receiveInitialPayload(contacts){
        Dispatcher.dispatch({
            type:actionTypes.RECEIVE_INITIAL_PAYLOAD,
            data:contacts
        });
    }

    return {
        receiveInitialPayload:receiveInitialPayload
    }

}(Dispatcher, ContactManagerConstants));
var ContactStore = (function ($, Dispatcher, ContactManagerConstants) {
    var dispatchToken,
        actionTypes = ContactManagerConstants.actionTypes,
        eventEmitter = $({}),
        CHANGE_EVENT = 'WOW';

    var VIEW_TYPES = {
        LIST: 'list',
        CREATE: 'create',
        VIEW: 'view',
        EDIT: 'edit'
    };

    var _contacts = [],
        _currentViewType = VIEW_TYPES.LIST,
        _currentId;

    function _init(contacts) {
        _contacts = contacts.map(_createContactObject);
        _currentId = _contacts[0].id;
    }

    function getCurrentContact() {
        var c;

        _contacts.forEach(function (contact) {
            if (_currentId === contact.id) {
                c = contact;
            }
        });
        return c;
    }

    function getCurrentViewType() {
        return _currentViewType;
    }

    function _random(min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));

    }

    function _createContactObject(contact) {
        return {
            id: contact.id || Date.now(),
            name: contact.name,
            tel: contact.tel,
            email: contact.email,
            avatar: _random(1, 10) + '.jpg'
        }
    }

    dispatchToken = Dispatcher.register(function (action) {
        var contact;
        console.log(action.type === actionTypes.DESTROY_CONTACT);
        switch (action.type) {
            case actionTypes.RECEIVE_INITIAL_PAYLOAD:
                _init(action.data);
                emitChange();
                break;
            case actionTypes.CLICK_DELETE:
                _currentViewType = VIEW_TYPES.LIST;
                emitChange();
                break;
            case actionTypes.DESTROY_CONTACT:
                _contacts.forEach(function (contact, index) {
                    console.log(action.id + ' ' + contact.id);

                    if (action.id === contact.id) {
                        console.log(_contacts.length);
                        _contacts.splice(index, 1);

                    }
                });
                console.log(_contacts[0].id);

                _currentId = _contacts[0].id;
                emitChange();
                break;
            case actionTypes.CLICK_EDIT:
                _currentViewType = VIEW_TYPES.EDIT;
                emitChange();
                break;
            case actionTypes.CLICK_CANCEL:
                if (_currentViewType === VIEW_TYPES.CREATE) {
                    _currentViewType = VIEW_TYPES.LIST
                } else {

                    _currentViewType = VIEW_TYPES.VIEW;
                }
                emitChange();
                break;
            case actionTypes.CLICK_CONTACT:
                _currentId = action.id;
                _currentViewType = VIEW_TYPES.VIEW;
                emitChange();
                break;
            case actionTypes.CLICK_SAVE:
                _currentViewType = VIEW_TYPES.VIEW;
                emitChange();
                break;
            case actionTypes.CLICK_CREATE:
                _currentViewType = VIEW_TYPES.CREATE;
                emitChange();
                break;

            case actionTypes.CREATE_CONTACT:
                contact = _createContactObject(action.id);
                _contacts.push(contact);
                _currentId = contact.id;
                emitChange();
                break;
            case actionTypes.UPDATE_CONTACT:
                _contacts.forEach(function (contact, index) {
                    if (contact.id === action.id.id) {
                        contact.name = action.id.name;
                        contact.email = action.id.email;
                        contact.tel = action.id.tel;
                    }
                });
                emitChange();
                break;


        }
    });
    function emitChange() {
        eventEmitter.trigger(CHANGE_EVENT);
        console.log(eventEmitter);
    }

    function addChangeListener(handler) {
        eventEmitter.on(CHANGE_EVENT, handler);
    }

    function getContacts() {
        return _contacts;
    }

    function removeChangeListener(handler) {
        eventEmitter.off(CHANGE_EVENT, handler);
    }

    return {
        addChangeListener: addChangeListener,
        emitChange: emitChange,
        getContacts: getContacts,
        dispatchToken: dispatchToken,
        getCurrentContact: getCurrentContact,
        getCurrentViewType: getCurrentViewType,
        removeChangeListener: removeChangeListener

    }
}($, Dispatcher, ContactManagerConstants));
ContactPersistantActionCreators.receiveInitialPayload([{
    id: 1,
    name: 'Terrence S. Hatfield',
    tel: '651-603-1723',
    email: 'TerrenceSHatfield@rhyta.com'
}, {
    id: 2,
    name: 'Chris M. Manning',
    tel: '513-307-5859',
    email: 'ChrisMManning@dayrep.com'
}, {
    id: 3,
    name: 'Ricky M. Digiacomo',
    tel: '918-774-0199',
    email: 'RickyMDigiacomo@teleworm.us'
}, {
    id: 4,
    name: 'Michael K. Bayne',
    tel: '702-989-5145',
    email: 'MichaelKBayne@rhyta.com'
}, {
    id: 5,
    name: 'John I. Wilson',
    tel: '318-292-6700',
    email: 'JohnIWilson@dayrep.com'
}, {
    id: 6,
    name: 'Rodolfo P. Robinett',
    tel: '803-557-9815',
    email: 'RodolfoPRobinett@jourrapide.com'
}]);

ReactDOM.render(<ContactManager/>,
    document.getElementById('app') );
